ID: 10523952
Name: Kai
Surname: de Gast

Files description:
lla2enu/cfg/parameters.cfg: configure file used to dynamically change the thresholds for the status flag:
	a) Crash_threshold = Indicates the max distance for which the satus is crash
		the default value is 1, it can be reconfigured to be any number between 0 and 2
	b) Unsafe_threshold = Indicates the max distance for which the satus is unsafe
		the default value is 5, it can be reconfigured to be any number between 4 and 15

		       obs    Crash_threshold	    Unsafe_threshold   car		
			+-----------|----------------------|------------+
	Status:		   "Crash"  1	    "Unsafe"       5    "Safe"
	

lla2enu/launch/launcher.launch: it launches: 
    1) the sub_gen node twice, one for each GPS source, using:
	a) a remap for the odometry topic and of the topic where the gps_pose of the vehicle is published (vehicle_input_topic)
	b) a private parameters: vehicle_name = name of the vehicle
	c) 3 public parameters which are the same for both vehicles: latitude_init, longitude_init and h0
    2) the compute_distance server
    3) the client_custom node
    4) the rqt_reconfigure used to change the values of the thresholds in the client_custom node

lla2enu/msg/CustomMsg.msg: contains the structure of the custom message which is:
	float64 distance
	string status

lla2enu/src/client_custom.cpp: client node that waits for the odometry messages of the vehicles, with an approximate time policy, then calls the compute_distance service, which returns the distance between the two vehicles, calculates the status flag based on the received distance value and publishes the custom message on the /distance_status topic.
	The parameters used to determine the status flag can be dynamically reconfigured.
	If the distance is nan the status flag will have value "NA".

lla2enu/src/compute_distance.cpp: server node which advertises the compute_distance service, that computes the distance between two 3D points.
	If one or both of the points have nan coordinates the returned distance is nan.

lla2enu/src/sub_gen.cpp: node that subscribes to the lla gps_pose of the specified vehicle and converts it to enu, if there is no gps signal the coordinates are set to nan.
After the conversion to enu the node broadcasts the tf, only if there is gps_signal so that there will be no errors in rviz, and publishes the odometry of the specified vehicle.

lla2enu/srv/ComputeDistance.srv: specifies the request and the result of the compute_distance service:
	1) the service requests the coordinates (x,y,z) of the two vehicles
	2) the result is the distance between the two vehicles


In the package you will also find a frames.pdf file generated by the "rosrun tf view_frames" command and a rosgraph.png file in which you can see the all the nodes and topics.

Once the launcher is launched you will see the following output:

#one for each time the node sub_gen is called
[ INFO] [1588699861.712888727]: starting node "name of the vehicle"
[ INFO] [1588699861.713476147]: STARTING POSITION: [45.631191, 9.294749, 231.506668]

#shows that the client_custom node was instantiated
[ INFO] [1588700082.589582669]: starting node client_custom

#shows that the comute_distance server was instantiated
[ INFO] [1588699861.725847712]: Ready to compute distance.

#shows default values of dynamic reconfigured parameters
[ INFO] [1588700082.605432700]: Reconfigure Request: 1.000000 5.000000

then whenever the values are dynamically reconfigure a new line will be printed, showing the new values.

The interesting topics that can be observed are:
/odom_car: contains odometry messages of the car in ENU coordinates
/odom_obs: contains odometry messages of the obs in ENU coordinates
/distance_status: contains custom messages with distance and status

 

